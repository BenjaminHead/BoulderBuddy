"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Firebase = require("nativescript-plugin-firebase");
// import { Goal } from '../models/goal.model';
// import { Daily } from '../models/daily.model';
var FirebaseService = /** @class */ (function () {
    function FirebaseService() {
    }
    FirebaseService.prototype.ngOnInit = function () { };
    FirebaseService.prototype.login = function (email, password) {
        return Firebase.login({
            type: Firebase.LoginType.PASSWORD,
            passwordOptions: {
                email: email,
                password: password
            }
        })
            .then(function (result) {
            console.log("user logged in", email, password);
            console.log("Alright, what's here?", result);
            return result;
        })
            .catch(function (error) {
            return error;
        });
    };
    FirebaseService.prototype.getAllUsers = function () {
        return Firebase.getValue('/users/')
            .then(function (data) {
            return data;
        })
            .catch(function (error) {
            console.log(error);
        });
    };
    FirebaseService.prototype.logout = function () {
        Firebase.logout();
    };
    FirebaseService.prototype.register = function (user) {
        return Firebase.createUser({
            email: user.email,
            password: user.password
        })
            .then(function (result) {
            console.log("user registered", user);
            user.uid = result.key;
            return Firebase.setValue('/users/' + result.key, user)
                .then(function (data) {
                return data;
            })
                .catch(function (error) {
                console.log(error);
            });
        })
            .catch(function (error) {
            console.log(error);
        });
    };
    FirebaseService.prototype.sendTripInfo = function (trip) {
        var _this = this;
        return Firebase.setValue('/trips/' + this.user.id, trip)
            .then(function (data) {
            console.log("Data sent", _this.user.id);
            return data.value;
        })
            .catch(function (error) {
            console.log(error);
        });
    };
    FirebaseService.prototype.getTripInfo = function (user) {
        return Firebase.getValue('/trips/' + user.id)
            .then(function (data) {
            return data.value;
        })
            .catch(function (error) {
            console.log(error);
        });
    };
    FirebaseService.prototype.resetPassword = function (email) {
        return Firebase.resetPassword({
            email: email
        }).then(function (result) {
            alert("email sent");
            return result;
        }).catch(function (error) {
            console.log(error);
        });
    };
    FirebaseService.prototype.getUser = function () {
        var _this = this;
        return Firebase.getCurrentUser()
            .then(function (user) {
            return Firebase.getValue('/users/' + user.uid)
                .then(function (data) {
                console.log("User returned", data.value);
                _this.user = data.value;
                return data.value;
            })
                .catch(function (error) {
                console.log(error);
            });
        })
            .catch(function (error) {
            console.log("Trouble in paradise: " + error);
        });
    };
    FirebaseService = __decorate([
        core_1.Injectable()
    ], FirebaseService);
    return FirebaseService;
}());
exports.FirebaseService = FirebaseService;
//# sourceMappingURL=data:application/json;base64,