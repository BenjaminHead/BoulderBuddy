"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Firebase = require("nativescript-plugin-firebase");
var moment = require("moment");
// import { Goal } from '../models/goal.model';
// import { Daily } from '../models/daily.model';
var FirebaseService = /** @class */ (function () {
    function FirebaseService() {
        this.tripTemplate = {
            destination: '',
            origin: '',
            travelTime: '',
            distanceTraveled: '',
            averageSpeed: '',
            pointsEarned: '',
            date: '',
            uid: ''
        };
    }
    // constructor(private tripService: TripService){}
    FirebaseService.prototype.ngOnInit = function () { };
    FirebaseService.prototype.login = function (email, password) {
        return Firebase.login({
            type: Firebase.LoginType.PASSWORD,
            passwordOptions: {
                email: email,
                password: password
            }
        })
            .then(function (result) {
            console.log("user logged in", email, password);
            console.log("Result of login", result, Firebase);
            return result;
        })
            .catch(function (error) {
            return error;
        });
    };
    FirebaseService.prototype.getAllUsers = function () {
        return Firebase.getValue('/users/')
            .then(function (data) {
            return data;
        })
            .catch(function (error) {
            console.log(error);
        });
    };
    FirebaseService.prototype.logout = function () {
        Firebase.logout();
    };
    FirebaseService.prototype.register = function (user) {
        return Firebase.createUser({
            email: user.email,
            password: user.password
        })
            .then(function (result) {
            console.log("user registered", user);
            user.uid = result.key;
            return Firebase.setValue('/users/' + result.key, user)
                .then(function (data) {
                return data;
            })
                .catch(function (error) {
                console.log(error);
            });
        })
            .catch(function (error) {
            console.log(error);
        });
    };
    FirebaseService.prototype.sendBoulderInfo = function (boulder, area) {
        return Firebase.update('/boulders/' + area + '/' + boulder.name, boulder)
            .then(function (result) {
            return result;
        }).catch(function (error) {
            console.log(error);
        });
    };
    FirebaseService.prototype.checkForDuplicates = function (boulder, area) {
        return Firebase.getValue('/boulders/' + area + '/' + boulder.name)
            .then(function (result) {
            console.log("Returned boulder data", result);
            for (var key in result) {
                if (!result.hasOwnProperty(key))
                    continue;
                var obj = result[key];
                console.log("Boulder is...", obj);
                if (obj.problems) {
                    console.log(obj.problems);
                    for (var i = 0; i < boulder.problems.length; i++) {
                        var submittedProblem = boulder.problems[i];
                        console.log("Subbed problem", submittedProblem);
                        for (var x = 0; x < obj.problems.length; x++) {
                            if (obj.problems[x] === submittedProblem) {
                                return true;
                            }
                            else {
                                return false;
                            }
                        }
                    }
                }
            }
        }).catch(function (error) {
            console.log(error);
        });
    };
    FirebaseService.prototype.sendTripInfo = function (trip) {
        var _this = this;
        this.getUserKey().then(function (result) {
            _this.user.uid = result;
            console.log("Here's the trip", trip);
            if (trip.destination_addresses) {
                _this.tripTemplate.destination = trip.destination_addresses;
            }
            if (trip.origin_addresses) {
                _this.tripTemplate.origin = trip.origin_addresses;
            }
            if (trip.rows[0].elements[0].status != "NOT_FOUND") {
                _this.tripTemplate.travelTime = trip.rows[0].elements[0].duration.text;
            }
            if (trip.rows[0].elements[0].status != "NOT_FOUND") {
                _this.tripTemplate.distanceTraveled = trip.rows[0].elements[0].distance.text;
            }
            if (trip.rows[0].elements[0].status != "NOT_FOUND") {
                _this.tripTemplate.pointsEarned = JSON.stringify(trip.rows[0].elements[0].duration.value);
            }
            var newDate = moment().format("YYYY-MM-DD");
            _this.tripTemplate.date = newDate.toString();
            _this.tripTemplate.uid = _this.user.uid;
            console.log("Moment date", _this.tripTemplate.date);
            return Firebase.push('/trips/' + _this.user.uid, _this.tripTemplate)
                .then(function (data) {
                return data;
            })
                .catch(function (error) {
                console.log(error);
            });
        });
    };
    FirebaseService.prototype.redeemPoints = function (points) {
        var _this = this;
        this.getUserKey().then(function (result) {
            _this.user.uid = result;
            var newDate = moment().format("YYYY-MM-DD");
            _this.tripTemplate.date = newDate.toString();
            _this.tripTemplate.uid = _this.user.uid;
            _this.tripTemplate.pointsEarned = points;
            return Firebase.push('/trips/' + _this.user.uid, _this.tripTemplate)
                .then(function (data) {
                return data;
            })
                .catch(function (error) {
                console.log(error);
            });
        });
    };
    FirebaseService.prototype.getPointsFromTrips = function () {
        var _this = this;
        return this.getUserKey().then(function (result) {
            var points = [];
            _this.user.uid = result;
            return Firebase.getValue('/trips/' + _this.user.uid)
                .then(function (data) {
                var trips = data.value;
                for (var key in trips) {
                    // skip loop if the property is from prototype
                    if (!trips.hasOwnProperty(key))
                        continue;
                    var obj = trips[key];
                    points.push(obj.pointsEarned);
                }
                console.log("This is the point value returned", points);
                return points;
            })
                .catch(function (error) {
                console.log(error);
            });
        });
    };
    FirebaseService.prototype.sendPointsFromTrips = function (points) {
        var _this = this;
        return this.getUserKey().then(function (result) {
            _this.user.uid = result;
            return Firebase.setValue('/points/' + _this.user.uid, points)
                .then(function (data) {
                return data;
            })
                .catch(function (error) {
                console.log(error);
            });
        });
    };
    FirebaseService.prototype.getTripInfo = function () {
        var _this = this;
        return this.getUserKey().then(function (result) {
            _this.user.uid = result;
            return Firebase.getValue('/trips/' + _this.user.uid)
                .then(function (data) {
                console.log("This is the data returned", data.value);
                return data.value;
            })
                .catch(function (error) {
                console.log(error);
            });
        });
        // return Firebase.getValue('/trips/' + this.user.uid)
        //     .then((data) => {
        //     console.log("Got...");
        //         console.log(JSON.stringify(data));
        //         return JSON.stringify(data);
        //     })
        //     .catch((error) => {
        //         console.log(error);
        //     })
    };
    FirebaseService.prototype.resetPassword = function (email) {
        return Firebase.resetPassword({
            email: email
        }).then(function (result) {
            alert("email sent");
            return result;
        }).catch(function (error) {
            console.log(error);
        });
    };
    FirebaseService.prototype.getUser = function () {
        return Firebase.getCurrentUser()
            .then(function (user) {
            return Firebase.getValue('/users/' + user.uid)
                .then(function (data) {
                return data.value;
            })
                .catch(function (error) {
                console.log("Nope");
                console.log(error);
            });
        })
            .catch(function (error) {
            console.log("Trouble in paradise: " + error);
        });
    };
    FirebaseService.prototype.getUserKey = function () {
        var _this = this;
        return Firebase.getCurrentUser()
            .then(function (user) {
            return Firebase.getValue('/users/' + user.uid)
                .then(function (data) {
                if (data.value === undefined) {
                    _this.user.uid = data.key;
                    return data.key;
                }
                else {
                    _this.user = data.value;
                    return data.key;
                }
            })
                .catch(function (error) {
                console.log("Nope");
                console.log(error);
            });
        })
            .catch(function (error) {
            console.log("Trouble in paradise: " + error);
        });
    };
    FirebaseService = __decorate([
        core_1.Injectable()
    ], FirebaseService);
    return FirebaseService;
}());
exports.FirebaseService = FirebaseService;
//# sourceMappingURL=data:application/json;base64,